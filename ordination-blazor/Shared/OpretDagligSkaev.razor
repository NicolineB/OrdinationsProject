@namespace ordinationsapp.Shared

@using shared.Model;
@using shared;
@using ordinationsapp.Model;
@using ordinationsapp.Data;
@inject ApiService apiService

<div class="container">
    <h1>Opret ordination (Daglig skæv)</h1>

    <div class="row">
        <p>Patient: @Patient?.navn (@Patient?.cprnr)</p>
        <div class="form-group row">
            <label for="laegemiddel" class="col-sm-4 col-form-label">Lægemiddel</label>
            <div class="col-sm-8">
                <input readonly type="text" class="form-control" id="laegemiddel" value=@laegemiddel?.navn>
            </div>
        </div>

        <div class="form-group row">
            <label for="startdato" class="col-sm-4 col-form-label">Startdato for ordination</label>
            <div class="col-sm-8">
                <input @bind="StartDato" type="date" class="form-control" id="startdato">
            </div>
        </div>

        <div class="form-group row">
            <label for="slutdato" class="col-sm-4 col-form-label">Slutdato for ordination</label>
            <div class="col-sm-8">
                <input @bind="SlutDato" type="date" class="form-control" id="slutdato">
            </div>
        </div>

        <div class="form-group row">
            <label for="anbefalet-enheder" class="col-sm-4 col-form-label">Anbefalet antal enheder per døgn</label>
            <div class="col-sm-8">
                <input readonly type="text" class="form-control" id="anbefalet-enheder" value=@AnbefaletDosisPerDøgnRounded>
            </div>
        </div>
    </div>    
    <div class="row mt-4">  
        <div class="form-group row">
            <div class="col-sm-2"></div>
            <div class="col-sm-4">
                <input @bind="Tid" type="time" class="form-control" id="dosis-tid">
            </div>
            <div class="col-sm-4">
                <input @bind="Antal" type="number" class="form-control" id="dosis-antal" placeholder="Mængde">
            </div>
            <div class="col-sm-2">
                <button class="btn btn-primary" @onclick="OpretDosis">Opret dosis</button>
            </div>
        </div>

        <div class="form-group row">
            <div class="col-sm-2"></div>
            <div class="col-sm-8">
                <ul class="list-group list-group-flush">
                    @foreach (var dosis in doser)
                    {
                        var tid = dosis.tid.ToString("HH:mm");
                        var antal = dosis.antal;
                        var d = dosis;
                        <li class="list-group-item">
                            @($"Tidspunkt: {tid}, antal: {antal}")
                            <button class="btn btn-sm btn-danger" @onclick="() => Slet(d)">Slet</button>
                        </li>
                    }
                </ul>
            </div>
            <div class="col-sm-2"></div>
        </div>
    </div>

    <div class="row mt-4">   
        <div class="form-group row">
            <div class="col-sm-8">
                <button class="btn btn-primary" @onclick="Opret">Opret ordination</button>
                <button class="btn btn-secondary" @onclick="() => onFortryd?.Invoke()">Fortryd</button>
            </div>
        </div>
    </div>
</div>



@code {
    [Parameter]
    public PatientResponse? Patient { get; set; }
    [Parameter]
    public Laegemiddel? laegemiddel { get; set; }
    [Parameter]
    public double AnbefaletDosisPerDøgn { get; set; }
    public string AnbefaletDosisPerDøgnRounded { get { return AnbefaletDosisPerDøgn.ToString("#.##"); } }
    [Parameter]
    public Action? onFortryd { get; set; }
    [Parameter]
    public Action<string>? onDone { get; set; }
    [Parameter]
    public Action<string>? onFejl { get; set; }

    private DateTime StartDato { get; set; } = DateTime.Now;
    private DateTime SlutDato { get; set; } = DateTime.Now.AddDays(3);
    private List<Dosis> doser = new List<Dosis>();

    private TimeOnly Tid { get; set; }
    private int Antal { get; set; }

    private async void Opret() {
        if (Patient == null || laegemiddel == null) {
            return;
        }
        //giver fejlbesked hvis dosis overskrider anbefalet dosis
        if (AnbefaletDosisPerDøgn < doser.Sum(x => x.antal))
        {
            onFejl?.Invoke($"Dosis overskrider anbefalet dosis");
            return;
        }
        //giver fejlbesked hvis dosis er mindre end 1
        if (doser.Exists(x => x.antal < 1))
        {
            onFejl?.Invoke($"Dosis kan ikke være mindre end 1");
            return;
        }
        //giver fejlbesked hvis start dato er større end slut dato
        if (DateTime.Compare(StartDato,SlutDato) > 0)
        {
            onFejl?.Invoke($"Start dato er større end slut dato");
            return;
        }
        
        Console.WriteLine("Opret");
        var ordination = await apiService.OpretDagligSkaev(Patient.id, laegemiddel.LaegemiddelId, doser.ToArray(), StartDato, SlutDato);
        Console.WriteLine("Oprettet!");
        Console.WriteLine(ordination);
        onDone?.Invoke($"Oprettet Daglig Skæv ordination for {Patient.navn}!");
    }

    private void OpretDosis() {
        Console.WriteLine(Tid);
        Console.WriteLine(Antal);
        //giver fejlbesked hvis antal er mindre end 1
        if (Antal < 1)
        {
            onFejl?.Invoke("Antal kan ikke være mindre end 1");
            return;
        }
        //giver fejlbesked hvis en dosis med samme antal allerede er oprettet
        if (doser.Exists(x => TimeOnly.FromDateTime(x.tid) == Tid))
        {
            onFejl?.Invoke("Dosis kan ikke have samme tidspunkt");
            return;
        }
        doser.Add(new Dosis(Util.CreateTimeOnly(Tid), Antal));
        
    }

    private void Slet(Dosis d)
    {
        doser.Remove(d);
    }

}