@namespace ordinationsapp.Shared

@using shared.Model;
@using ordinationsapp.Model;
@using ordinationsapp.Data;
@inject ApiService apiService

<div class="container">
    <h1>Opret ordination (PN)</h1>

    <div class="row">
        <p>Patient: @Patient?.navn (@Patient?.cprnr)</p>
        <div class="form-group row">
            <label for="laegemiddel" class="col-sm-4 col-form-label">Lægemiddel</label>
            <div class="col-sm-8">
            <input readonly type="text" class="form-control" id="laegemiddel" value=@laegemiddel?.navn>
            </div>
        </div>

        <div class="form-group row">
            <label for="startdato" class="col-sm-4 col-form-label">Startdato for ordination</label>
            <div class="col-sm-8">
            <input @bind="StartDato" type="date" class="form-control" id="startdato">
            </div>
        </div>

        <div class="form-group row">
            <label for="slutdato" class="col-sm-4 col-form-label">Slutdato for ordination</label>
            <div class="col-sm-8">
            <input @bind="SlutDato" type="date" class="form-control" id="slutdato">
            </div>
        </div>

        <div class="form-group row">
            <label for="anbefalet-enheder" class="col-sm-4 col-form-label">Anbefalet antal enheder per døgn</label>
            <div class="col-sm-8">
                <input readonly type="text" class="form-control" id="anbefalet-enheder" value=@AnbefaletDosisPerDøgnRounded>
            </div>
        </div>

        <div class="form-group row">
            <label for="antal-enheder" class="col-sm-4 col-form-label">Antal enheder (styk):</label>
            <div class="col-sm-8">
            <input @bind="antalEnheder" type="number" class="form-control" id="antal-enheder">
            </div>
        </div>
        <div class="form-group row">
            <div class="col-sm-8">
            <button class="btn btn-primary" @onclick="Opret">Opret ordination</button>
            <button class="btn btn-secondary" @onclick="() => onFortryd?.Invoke()">Fortryd</button>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public PatientResponse? Patient { get; set; }
    [Parameter]
    public Laegemiddel? laegemiddel { get; set; }
    [Parameter]
    public double AnbefaletDosisPerDøgn { get; set; }
    public string AnbefaletDosisPerDøgnRounded { get { return AnbefaletDosisPerDøgn.ToString("#.##"); } }
    [Parameter]
    public Action? onFortryd { get; set; }
    [Parameter]
    public Action<string>? onDone { get; set; }
    [Parameter]
    public Action<string>? onFejl { get; set; }

    private int antalEnheder = 0;
    private DateTime StartDato { get; set; } = DateTime.Now;
    private DateTime SlutDato { get; set; } = DateTime.Now.AddDays(3);

    private async void Opret() {
        if (Patient == null || laegemiddel == null) {
            return;
        }
        //giver fejlbesked hvis dosis overskrider anbefalet dosis
        if (AnbefaletDosisPerDøgn < antalEnheder)
        {
            onFejl?.Invoke($"Dosis overskrider anbefalet dosis");
            return;
        }
        //giver fejlbesked hvis antal er mindre end nul
        if (antalEnheder < 1)
        {
            onFejl?.Invoke("Antal kan ikke være mindre end 1");
            return;
        }
        //giver fejlbesked hvis start dato er større end slut dato
        if (DateTime.Compare(StartDato,SlutDato) > 0)
        {
            onFejl?.Invoke($"Start dato er større end slut dato");
            return;
        }
        Console.WriteLine("Opret");
        PN pn = await apiService.OpretPN(Patient.id, laegemiddel.LaegemiddelId, antalEnheder, StartDato, SlutDato);
        Console.WriteLine("Oprettet!");
        Console.WriteLine(pn);
        onDone?.Invoke($"Oprettet PN ordination for {Patient.navn}!");
    }

}